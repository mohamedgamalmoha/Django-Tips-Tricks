from django.urls import path

from .views import PopulateDummyDataAdminView


class PopulateDummyDataAdminMixin:
    """
    Mixin to add a populate dummy data action to Django admin views.

    This mixin extends Django's ModelAdmin to include a custom URL path that triggers a view for populating
    dummy data using a specified factory class. It's intended to be used with models where dummy data generation
    is useful for development or testing purposes.
    """
    #: The factory class used to generate dummy model instances.
    factory_class = None

    def get_urls(self):
        """
        Extends the ModelAdmin's URLs to include a custom path for the dummy data population view.

        This method adds a new URL pattern that points to the `populate_dummy_data_view` method. It ensures that
        the custom view integrates seamlessly with the existing admin URLs.

        Returns:
            - list: A list of URL patterns, including the new pattern for dummy data population.
        """
        urls = super().get_urls()  # Retrieve the existing URLs from the superclass
        info = self.model._meta.app_label, self.model._meta.model_name  # Get the app label and model name
        # Add a new URL pattern for populating dummy data, at the beginning of the list
        return [
            path('populate-dummy-data/', self.populate_dummy_data_view, name='%s_%s_populate_dummy_data' % info),
            *urls  # Include the existing URLs
        ]

    def populate_dummy_data_view(self, request, extra_context=None):
        """
        View function to render the populate dummy data form and handle form submissions.

        This method is invoked when the custom URL for populating dummy data is accessed. It renders a view that
        allows the user to specify the number of dummy instances to create. The view is generated using the
        `PopulateDummyDataAdminView` class.

        Args:
            - request: The HttpRequest object.
            - extra_context (dict, optional): Additional context data to pass to the template. Defaults to None.

        Returns:
            - HttpResponse: The response generated by the `PopulateDummyDataAdminView`.
        """
        # Merge the base admin context with any extra context provided
        context = {
            **self.admin_site.each_context(request),  # Base admin context
            **(extra_context or {}),  # Extra context, if any
            "opts": self.opts,
        }
        # Return the response from the `PopulateDummyDataAdminView`, initialized with this mixin and the factory class
        return PopulateDummyDataAdminView.as_view(
            model_admin=self,
            factory_class=self.factory_class,
            extra_context=context  # Pass the combined context to the view
        )(request)  # Call the view with the request object
